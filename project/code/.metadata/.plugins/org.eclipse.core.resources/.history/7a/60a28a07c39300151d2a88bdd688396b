package compute;

import scheduler.SchedulingAlgorithm;
import sensors.SensorData;

/**
 * controls the back end processing.
 * 
 * This includes: 1) scheduler 2) task queues
 * 
 */
public class ProcessingController implements Runnable {
	private volatile ProcessingState processing_state;

	private volatile SensorData sensor_data;

	public ProcessingController(SchedulingAlgorithm scheduling_algorithm) {
		this.processing_state = new ProcessingState(scheduling_algorithm);
		sensor_data = null;
	}

	@Override
	public void run() {
		while (true) {
			try {
				// update every 10 ms (100 fps)
				Thread.sleep(10);
			} catch (Exception e) {
				e.printStackTrace();
			}

			// ask the state to update itself
			processing_state.update(10L);
		}
	}

	/**
	 * return the state of the processing.
	 * 
	 * @return
	 */
	public ProcessingState get_state() {
		return this.processing_state;
	}

	public void set_sensor_data(SensorData sensor_data) {
		this.sensor_data = sensor_data;
	}
}
